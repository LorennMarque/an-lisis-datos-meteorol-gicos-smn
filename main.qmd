---
title: "Trabajo Práctico 2 | Grupo 2" 
date: "r Sys.Date()" 
format: html
theme: Cosmo 
toc: true 
toc-location: right 
number-sections: true 
code-fold: true
code-tools: true
smooth-scroll: true
fig-align: center 
toc-depth: 3
lang: es
editor: visual
---

```{r echo = FALSE, warning = FALSE, output = FALSE}
# Limpieza de datos.
library(dplyr)
library(DataExplorer) # Para usar func plot_intro
library(tidyverse)
library(inspectdf)

# Visualización de datos.
library(plotly)
library(leaflet)


# Análisis geoespacial
library(geojsonsf)
library(sf)


# Carga de datos
datos_smn <- readRDS("data/datos_smn.rds")

datos_estaciones <- read.csv("data/estaciones.csv")

datos_precipitaciones <- read.delim("data/smn_precipitaciones-1991-2024.txt", sep = ",")

# APIs y tokens
mapbox_token <- "pk.eyJ1IjoibG9yZW5uem8iLCJhIjoiY20xcHYyd3g2MDk0bTJxb2k4YWZvOHlmcSJ9.r4E2pcTSM89NNHBFSmvKHw"

```

# Trabajo Práctico 2

Análisis Exploratorio de Datos de un Dataset Real

## Carga y estructura de datos

```{r}
datos_precipitaciones$Fecha <-  as.Date(datos_precipitaciones$Fecha, format = "%Y-%m-%d")

df <- datos_estaciones %>% 
  inner_join(datos_smn, by = c("Nombre" = "NOMBRE")) %>%
  inner_join(datos_precipitaciones, by = c("Nro" = "Estacion", "FECHA" = "Fecha"))
```

Formato de columnas

```{r}
colnames(df)
```

Renombrar Columnas

```{r}
df <- df %>%
  rename( nombre_estacion = Nombre,
                provincia = Provincia,
                   altura = Altura,
              id_estacion = Nro,
                  latitud = Latitud,
                 longitud = Longitud,
                    fecha = FECHA,
                     hora = HORA,
              temperatura = TEMP,
                  humedad = HUM,
      presion_atmosferica = PNM,
         direccion_viento = DD,
         velocidad_viento = FF,
            precipitacion = Precipitacion..mm.
          )
```

Reorganizar Columnas

```{r}
df <- df %>%
  dplyr::select(
    id_estacion, nombre_estacion, provincia, altura, temperatura, humedad, presion_atmosferica, direccion_viento, velocidad_viento, precipitacion, latitud, longitud, hora, fecha
  )
```

Formato de datos

```{r, output=FALSE, warning=FALSE}
str(df)
```

![Estructura de datos, antes de formatear](images/data_structure.png)

```{r}
# Convertir columnas a factor
df$id_estacion <- as.factor(df$id_estacion)
df$nombre_estacion <- as.factor(df$nombre_estacion)
df$provincia <- as.factor(df$provincia)

# Reemplazar los valores "\\N" por NA
df$precipitacion[df$precipitacion == "\\N"] <- NA

# Convertir la columna a numérico
df$precipitacion <- as.numeric(df$precipitacion)
```

![Estructura de datos limpia](images/data_structure_formated.png)

| Variable            | Concepto                      | Tipo   |
|---------------------|-------------------------------|--------|
| id_estacion         | Identificador de estación     | Factor |
| nombre_estacion     | Nombre de estación            | Factor |
| provincia           | Provincia                     | Factor |
| altura              | Altura sobre el nivel del mar | int    |
| temperatura         | Temperatura en UNIDAD ❓      | num    |
| humedad             | ❓                            | num    |
| presion_atmosferica | ❓                            | num    |
| direccion_viento    | ❓                            | num    |
| velocidad_viento    | ❓                            | num    |
| precipitacion       | ❓ UNIDAD                     | num    |
| latitud             | Latitud                       | num    |
| longitud            | Longitud                      | num    |
| hora                | Hora                          | num    |
| fecha               | Fecha                         | Date   |

: Diccionario de variables

## Identificación de errores

```{r}
# Verificar valores nulos
df %>%
  summarise(across(everything(), ~ sum(is.na(.)))) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "missing") %>%
  arrange(desc(missing))
```

```{r}
# Visualizar valores faltantes
plot_intro(df)
```

Almacenar variables categóricas y numéricas por separado.

```{r}
# Seleccionar columnas numéricas
df_numericas <- df %>% 
  select(where(is.numeric))

# Seleccionar columnas categóricas (caracteres o factores)
df_categoricas <- df %>% 
  select(where(~ is.factor(.) | is.character(.)))
```

```{r}
introduce(df)
```

```{r}
plot_missing(df)
```

```{r}
plot_bar(df)
```

```{r}
plot_histogram(df)
```

```{r}
plot_correlation(na.omit(df), maxcat = 5L)
```

## Limpieza de datos

## Visualización Georreferenciado

```{r}
df_coords <- df %>%
  group_by(latitud,longitud) %>%
  summarise(n = n())
```

```{r}
# Crear el gráfico
fig <- plot_ly(data = df_coords, 
               type = 'scattermapbox',
               lat = ~latitud, 
               lon = ~longitud,
               mode = 'markers',
               marker = list(size = 8, color = 'blue', opacity = 0.7))

# Establecer las opciones de diseño y el estilo del mapa
fig <- fig %>%
  layout(
    mapbox = list(
      style = 'open-street-map',  # Alternativas: "carto-positron", "stamen-terrain", "dark"
      zoom = 4,                   # Nivel de zoom
      center = list(lat = mean(df$latitud), lon = mean(df$longitud))  # Centrar en promedio de tus datos
    )
  )

# (Opcional) Establecer el token de Mapbox si tienes uno
if (!is.null(mapbox_token)) {
  fig <- fig %>%
    layout(mapbox = list(accesstoken = mapbox_token))
}

# Mostrar el gráfico
fig
```

```{r}
# Cargar los puntos del dataframe "df" que tiene latitud y longitud
# Cargar las provincias desde el archivo GeoJSON
provincias.comp <- geojson_sf("rasters/provincias.json")%>%
  st_make_valid()  # Arreglar geometrías invalidas

provincias <- provincias.comp[,c("nam", "geometry")]

# Convertir df a objeto sf (datos espaciales) con sistema de coordenadas WGS84
df_sf <- df_coords %>%
  filter(!is.na(latitud) & !is.na(longitud)) %>%  
  st_as_sf(coords = c("longitud", "latitud"), crs = 4326)

estaciones_por_provincia <- st_join(df_sf, provincias)

estaciones_agrupadas <- estaciones_por_provincia %>%
  group_by(nam) %>%
  summarise(total = n())


# Unir el conteo con los datos geojson de las provincias
provincias <- provincias %>%
  st_join(estaciones_agrupadas)

provincias$total[is.na(provincias$total_entregas)] <- 0

# Crear el mapa con ggplot2
ggplot(data = provincias) +
  geom_sf(aes(fill = total)) +  # Colorear según la cantidad de entregas
  scale_fill_viridis_c(option = "plasma", na.value = "white") +  # Paleta de colores
  theme_minimal() +
  labs(
    title = "Cantidad de Entregas por Barrio en Buenos Aires",
    fill = "Entregas"
  )
```
