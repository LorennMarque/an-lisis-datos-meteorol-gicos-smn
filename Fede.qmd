---
title: "Trabajo Práctico 2 | Grupo 2" 
date: "r Sys.Date()" 
format: html
theme: Cosmo 
toc: true 
toc-location: right 
number-sections: true 
code-fold: true
code-tools: true
smooth-scroll: true
fig-align: center 
toc-depth: 3
lang: es
editor: visual
---

```{r echo = FALSE, warning = FALSE, output = FALSE}
# Limpieza de datos.
library(dplyr)
library(DataExplorer) # Para usar func plot_intro
library(tidyverse)
library(inspectdf)
library(lubridate)
library(tidyr)
# Visualización de datos.
library(plotly)
library(leaflet)


# Análisis geoespacial
library(geojsonsf)
library(sf)


# Carga de datos
datos_smn <- readRDS("data/datos_smn.rds")

datos_estaciones <- read.csv("data/estaciones.csv")

datos_precipitaciones <- read.delim("data/smn_precipitaciones-1991-2024.txt", sep = ",")

# APIs y tokens
mapbox_token <- "pk.eyJ1IjoibG9yZW5uem8iLCJhIjoiY20xcHYyd3g2MDk0bTJxb2k4YWZvOHlmcSJ9.r4E2pcTSM89NNHBFSmvKHw"

```

# Trabajo Práctico 2

Análisis Exploratorio de Datos de un Dataset Real

## Carga y estructura de datos

```{r}
datos_precipitaciones$Fecha <-  as.Date(datos_precipitaciones$Fecha, format = "%Y-%m-%d")

df <- datos_estaciones %>% 
  inner_join(datos_smn, by = c("Nombre" = "NOMBRE")) %>%
  inner_join(datos_precipitaciones, by = c("Nro" = "Estacion", "FECHA" = "Fecha"))
```

Formato de columnas

```{r}
colnames(df)
```

Renombrar Columnas

```{r}
df <- df %>%
  rename( nombre_estacion = Nombre,
                provincia = Provincia,
                   altura = Altura,
              id_estacion = Nro,
                  latitud = Latitud,
                 longitud = Longitud,
                    fecha = FECHA,
                     hora = HORA,
              temperatura = TEMP,
                  humedad = HUM,
      presion_atmosferica = PNM,
         direccion_viento = DD,
         velocidad_viento = FF,
            precipitacion = Precipitacion..mm.
          )
```

Reorganizar Columnas

```{r}
df <- df %>%
  dplyr::select(
    id_estacion, nombre_estacion, provincia, altura, temperatura, humedad, presion_atmosferica, direccion_viento, velocidad_viento, precipitacion, latitud, longitud, hora, fecha
  )
```

Formato de datos

```{r, output=FALSE, warning=FALSE}
str(df)
```

![Estructura de datos, antes de formatear](images/data_structure.png)

```{r}
# Convertir columnas a factor
df$id_estacion <- as.factor(df$id_estacion)
df$nombre_estacion <- as.factor(df$nombre_estacion)
df$provincia <- as.factor(df$provincia)

# Reemplazar los valores "\\N" por NA
df$precipitacion[df$precipitacion == "\\N"] <- NA

# Convertir la columna a numérico
df$precipitacion <- as.numeric(df$precipitacion)
```

![Estructura de datos limpia](images/data_structure_formated.png)

| Variable            | Concepto                      | Tipo   |
|---------------------|-------------------------------|--------|
| id_estacion         | Identificador de estación     | Factor |
| nombre_estacion     | Nombre de estación            | Factor |
| provincia           | Provincia                     | Factor |
| altura              | Altura sobre el nivel del mar | int    |
| temperatura         | Temperatura en UNIDAD ❓      | num    |
| humedad             | ❓                            | num    |
| presion_atmosferica | ❓                            | num    |
| direccion_viento    | ❓                            | num    |
| velocidad_viento    | ❓                            | num    |
| precipitacion       | ❓ UNIDAD                     | num    |
| latitud             | Latitud                       | num    |
| longitud            | Longitud                      | num    |
| hora                | Hora                          | num    |
| fecha               | Fecha                         | Date   |

: Diccionario de variables

## Identificación de errores

```{r}
# Verificar valores nulos
df %>%
  summarise(across(everything(), ~ sum(is.na(.)))) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "missing") %>%
  arrange(desc(missing))
```

```{r}
# Visualizar valores faltantes
plot_intro(df)
```

Almacenar variables categóricas y numéricas por separado.

```{r}
introduce(df)
```

```{r}
plot_missing(df)
```

```{r}
plot_bar(df)
```

```{r}
# plot_histogram(df)
```

```{r}
# plot_correlation(na.omit(df), maxcat = 5L)
```

## Limpieza de datos

id_estacion, nombre_estacion, provincia, altura, temperatura, humedad, presion_atmosferica, direccion_viento, velocidad_viento, precipitacion, latitud, longitud, hora, fecha

```{r}
# Suponiendo que tu dataset se llama 'datos'
# Filtramos eliminando NA y restringiendo los valores al rango deseado
df <- df %>%
  na.omit() %>%  # Eliminar filas con NA
  filter(
    presion_atmosferica >= 950 & presion_atmosferica <= 1050,
    humedad >= 0 & humedad <= 100,
    velocidad_viento >= 0 & velocidad_viento <= 150,
    direccion_viento >= 0 & direccion_viento <= 360,
    temperatura >= -35 & temperatura <= 50
  )

saveRDS(df, file = "clean_data.rds")
```

# IDEAS ❓❓❓❓❓❓

1.  Rango de fechas (primera y ultima) de datos cargados. LORENN
2.  ¿Cuál es la humedad promedio en cada provincia? (anual) aplica a todas las variables. FRANCO
3.  ¿Qué estación registró la temperatura más alta? FEDE
4.  ¿Qué estación registró la temperatura más baja? LORENN
5.  ¿En qué provincia se registró la mayor precipitación? (todas las variables) FRANCO
6.  Estaciones con mayor y menor altitud. FEDE
7.  ¿Existe correlaciónes? LORENN
8.  variación estacional FRANCO
9.  Fecha de apertura estaciones. FEDE
10. condiciones climáticas más extremas LORENN
11. ¿Se observan patrones asociados a eventos como El Niño o La Niña? FRANCO
12. Segmentar por condiciones climaticas similares. FEDE

## Visualización Georreferenciado

```{r}
df_coords <- df %>%
  group_by(latitud,longitud) %>%
  summarise(n = n())
```

```{r}
# Crear el gráfico
fig <- plot_ly(data = df_coords, 
               type = 'scattermapbox',
               lat = ~latitud, 
               lon = ~longitud,
               mode = 'markers',
               marker = list(size = 8, color = 'blue', opacity = 0.7))

# Establecer las opciones de diseño y el estilo del mapa
fig <- fig %>%
  layout(
    mapbox = list(
      style = 'open-street-map',  # Alternativas: "carto-positron", "stamen-terrain", "dark"
      zoom = 4,                   # Nivel de zoom
      center = list(lat = mean(df$latitud), lon = mean(df$longitud))  # Centrar en promedio de tus datos
    )
  )

# (Opcional) Establecer el token de Mapbox si tienes uno
if (!is.null(mapbox_token)) {
  fig <- fig %>%
    layout(mapbox = list(accesstoken = mapbox_token))
}

# Mostrar el gráfico
fig
```

```{r}
# Cargar los puntos del dataframe "df" que tiene latitud y longitud
# Cargar las provincias desde el archivo GeoJSON
provincias.comp <- geojson_sf("rasters/provincias.json")%>%
  st_make_valid()  # Arreglar geometrías invalidas

provincias <- provincias.comp[,c("nam", "geometry")]

# Convertir df a objeto sf (datos espaciales) con sistema de coordenadas WGS84
df_sf <- df_coords %>%
  filter(!is.na(latitud) & !is.na(longitud)) %>%  
  st_as_sf(coords = c("longitud", "latitud"), crs = 4326)

estaciones_por_provincia <- st_join(df_sf, provincias)

estaciones_agrupadas <- estaciones_por_provincia %>%
  group_by(nam) %>%
  summarise(total = n())


# Unir el conteo con los datos geojson de las provincias
provincias <- provincias %>%
  st_join(estaciones_agrupadas)

provincias$total[is.na(provincias$total_entregas)] <- 0

# Crear el mapa con ggplot2
ggplot(data = provincias) +
  geom_sf(aes(fill = total)) +  # Colorear según la cantidad de entregas
  scale_fill_viridis_c(option = "plasma", na.value = "white") +  # Paleta de colores
  theme_minimal() +
  labs(
    title = "Cantidad de Entregas por Barrio en Buenos Aires",
    fill = "Entregas"
  )
```

```{r}
#¿Qué estación registró la temperatura más alta? 

# Filtrar las 30 estaciones con la temperatura más alta
top_30_temp <- df %>%
  group_by(nombre_estacion) %>%
  summarise(max_temperatura = max(temperatura, na.rm = TRUE), .groups = 'drop') %>%
  arrange(desc(max_temperatura)) %>%
  slice_head(n = 30)

# Crear el gráfico de barras
ggplot(top_30_temp, aes(x = reorder(nombre_estacion, max_temperatura), y = max_temperatura)) +
  geom_bar(stat = "identity", fill = "steelblue") +  # Puedes cambiar el color
  coord_flip() +  # Gira el gráfico para mejor visibilidad
  labs(title = "Temperaturas Máximas por Estación",
       x = "Estación",
       y = "Temperatura Máxima (°C)") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 8))  # Ajusta el tamaño de la etiqueta del eje y si es necesario
```

# 

```{r}
# Filtrar las 30 estaciones con la temperatura más alta y obtener sus coordenadas
top_30_temp <- df %>%
  group_by(nombre_estacion) %>%
  summarise(max_temperatura = max(temperatura, na.rm = TRUE), 
            latitud = mean(latitud, na.rm = TRUE), 
            longitud = mean(longitud, na.rm = TRUE), .groups = 'drop') %>%
  arrange(desc(max_temperatura)) %>%
  slice_head(n = 30)

# Crear el gráfico de mapa utilizando top_30_temp
fig <- plot_ly(data = top_30_temp, 
               type = 'scattermapbox',
               lat = ~latitud, 
               lon = ~longitud,
               mode = 'markers',
               marker = list(size = 8, color = top_30_temp$max_temperatura, colorscale = 'Viridis', opacity = 0.7),
               text = ~paste(nombre_estacion, ": ", max_temperatura, "°C"))  # Texto al pasar el mouse

# Establecer las opciones de diseño y el estilo del mapa
fig <- fig %>%
  layout(
    title = "Ubicación de las Estaciones con Temperaturas Máximas",
    mapbox = list(
      style = 'open-street-map',  # Alternativas: "carto-positron", "stamen-terrain", "dark"
      zoom = 4,                   # Nivel de zoom
      center = list(lat = mean(top_30_temp$latitud), lon = mean(top_30_temp$longitud))  # Centrar en promedio de tus datos
    )
  )

# (Opcional) Establecer el token de Mapbox si tienes uno
if (!is.null(mapbox_token)) {
  fig <- fig %>%
    layout(mapbox = list(accesstoken = mapbox_token))
}

# Mostrar el gráfico
fig

```

## Conclusión sobre las Temperaturas Máximas

El análisis muestra que las temperaturas máximas más altas en Argentina se registran en el norte y centro del país, lideradas por estaciones como Santiago del Estero y Las Lomitas con valores cercanos a 45 °C. También se observan picos elevados en zonas del litoral y del centro, como Resistencia y Córdoba, y, sorprendentemente, en áreas más al sur como San Antonio Oeste y Bahía Blanca. Esto resalta la gran variabilidad climática en Argentina, donde el calor extremo no se limita solo al norte, sino que afecta diversas regiones del país.

```{r}

#Estaciones con mayor y menor altitud. 

# Filtrar las 10 estaciones más al norte y al sur, asegurando que los nombres sean únicos
top_norte <- df %>%
  arrange(desc(latitud)) %>%
  distinct(nombre_estacion, .keep_all = TRUE) %>%  # Mantener solo nombres únicos
  slice_head(n = 10) %>%
  mutate(grupo = "Norte")

top_sur <- df %>%
  arrange(latitud) %>%
  distinct(nombre_estacion, .keep_all = TRUE) %>%  # Mantener solo nombres únicos
  slice_head(n = 10) %>%
  mutate(grupo = "Sur")

# Combinar los datos
estaciones_extremas <- bind_rows(top_norte, top_sur)

# Crear el gráfico de mapa
fig <- plot_ly(data = estaciones_extremas, 
               type = 'scattermapbox',
               lat = ~latitud, 
               lon = ~longitud,
               mode = 'markers',
               marker = list(size = 10, opacity = 0.7),
               text = ~paste(nombre_estacion, "<br>Grupo:", grupo),  # Texto al pasar el mouse
               color = ~grupo,  # Diferenciar por grupo
               colors = c("red", "blue"))  # Colores para los grupos

# Establecer las opciones de diseño y el estilo del mapa
fig <- fig %>%
  layout(
    title = "Ubicación de las 10 Estaciones Más al Norte y Más al Sur",
    mapbox = list(
      style = 'open-street-map',  # Alternativas: "carto-positron", "stamen-terrain", "dark"
      zoom = 4,                   # Nivel de zoom
      center = list(lat = mean(estaciones_extremas$latitud), 
                     lon = mean(estaciones_extremas$longitud))  # Centrar en promedio de tus datos
    )
  )

# (Opcional) Establecer el token de Mapbox si tienes uno
if (!is.null(mapbox_token)) {
  fig <- fig %>%
    layout(mapbox = list(accesstoken = mapbox_token))
}

# Mostrar el gráfico
fig

```

```{r}
# Paso 1: Calcular la temperatura promedio por estación (solo para las estaciones del norte y sur ya filtradas)
temp_promedio_extremas <- df %>%
  filter(nombre_estacion %in% estaciones_extremas$nombre_estacion) %>%
  group_by(nombre_estacion) %>%
  summarise(temp_promedio = mean(temperatura, na.rm = TRUE)) %>%
  left_join(estaciones_extremas %>% select(nombre_estacion, grupo), by = "nombre_estacion")

# Reordenar el factor 'nombre_estacion' según la temperatura promedio
temp_promedio_extremas <- temp_promedio_extremas %>%
  mutate(nombre_estacion = factor(nombre_estacion, levels = temp_promedio_extremas %>%
                                    arrange(desc(temp_promedio)) %>%
                                    pull(nombre_estacion)))

# Paso 2: Crear el gráfico comparativo
ggplot(temp_promedio_extremas, aes(x = nombre_estacion, y = temp_promedio, fill = grupo)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal() +
  labs(title = "Temperaturas Promedio de Estaciones del Norte y Sur",
       x = "Estación", 
       y = "Temperatura Promedio (°C)",
       fill = "Grupo") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

## Análisis de Temperaturas Promedio entre Estaciones del Norte y Sur

Tras analizar las temperaturas promedio de estaciones meteorológicas en el norte y sur de Argentina, se observa una marcada diferencia entre ambas regiones. Las estaciones del norte, como *Bernardo de Irigoyen AERO* (27.8 °C) y *Las Lomitas* (25.22 °C), presentan temperaturas promedio considerablemente altas, con valores que oscilan entre 19.7 °C y 27.8 °C. Este patrón refleja la influencia del clima cálido característico de la región.

Por otro lado, las estaciones del sur muestran temperaturas significativamente más bajas. Estaciones como *Río Grande B.A.* (5.89 °C) y *Ushuaia AERO* (6.17 °C) registran promedios en un rango de 5.89 °C a 13.59 °C, debido a las condiciones frías de la región patagónica y su proximidad a zonas de mayor latitud.

**Conclusión**: Este análisis resalta el contraste climático en Argentina, donde las estaciones del norte presentan temperaturas más cálidas en comparación con las del sur, alineándose con la variación latitudinal y las características geográficas del país.

```{r}

# Paso 1: Filtrar el dataset y agrupar por fecha de apertura (con días completos)
df_filtrado <- df %>%
  arrange(nombre_estacion, fecha) %>%  # Ordenar por estación y fecha
  group_by(nombre_estacion) %>%
  slice_head(n = 1) %>%  # Tomar el primer registro por estación (fecha de apertura)
  ungroup()  # Eliminar el agrupamiento

# Paso 2: Cambiar el formato de la fecha
df_filtrado <- df_filtrado %>%
  mutate(fecha_formateada = format(fecha, "%Y-%m-%d"))  # Cambiar el formato a 'año-mes-día'

# Paso 3: Contar la cantidad de estaciones por fecha de apertura
df_fecha_apertura <- df_filtrado %>%
  group_by(fecha_formateada) %>%
  summarise(cantidad_estaciones = n(), .groups = "drop") %>%
  arrange(fecha_formateada)  # Ordenar por fecha

# Paso 4: Graficar la cantidad de estaciones por fecha de apertura
ggplot(df_fecha_apertura, aes(x = fecha_formateada, y = cantidad_estaciones)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  theme_minimal() +
  labs(title = "Cantidad de Estaciones por Fecha de Apertura",
       x = "Fecha de Apertura", 
       y = "Cantidad de Estaciones") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar las etiquetas del eje x para mejorar la legibilidad


```

```{r}
# Paso 1: Filtrar el dataset original y obtener el día de apertura para cada estación
df_filtrado <- df %>%
  arrange(nombre_estacion, fecha) %>%  # Ordenar por estación y fecha
  group_by(nombre_estacion) %>%
  slice_head(n = 1) %>%  # Tomar el primer registro por estación (fecha de apertura)
  ungroup()

# Paso 2: Contar la cantidad de estaciones por fecha de apertura (usando la columna `fecha` existente)
df_fecha_apertura <- df_filtrado %>%
  group_by(fecha) %>%
  summarise(cantidad_estaciones = n(), .groups = "drop") %>%
  arrange(desc(cantidad_estaciones))  # Ordenar por cantidad de estaciones de mayor a menor

# Mostrar el resultado
print(df_fecha_apertura)


```

#Es posible que en nuestro conjunto de datos existieran nombres de estaciones repetidos, lo cual podría haber generado inconsistencias al momento de analizar las fechas de apertura de las estaciones. Para evitar estos problemas, realizamos un procedimiento de filtrado en el que seleccionamos únicamente la primera fecha de apertura registrada para cada estación, asegurando así que cada estación fuera representada solo una vez en el análisis

```{r}

# Paso 1: Crear una columna que agrupe estaciones con nombres similares
df_filtrado_estaciones <- df_filtrado %>%
  mutate(grupo_estacion = substr(nombre_estacion, 1, 20))  # Agrupar por las primeras 5 letras del nombre

# Paso 2: Ordenar y agrupar para identificar fechas de apertura y cierre
df_abiertas_cerradas <- df %>%
  group_by(nombre_estacion) %>%
  summarise(
    fecha_apertura = min(fecha, na.rm = TRUE),
    fecha_cierre = max(fecha, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  # Convertir fechas a formato día-mes-año
  mutate(
    fecha_apertura = format(fecha_apertura, "%d-%m-%Y"),
    fecha_cierre = format(fecha_cierre, "%d-%m-%Y")
  ) %>%
  arrange(fecha_apertura)  # Ordenar por fecha de apertura

# Mostrar el resultado
df_abiertas_cerradas

```

La distribución de fechas muestra una apertura masiva de estaciones el 1 de enero de 2018, con 90 estaciones, posiblemente indicando el inicio de una gran fase de expansión. En octubre de 2019, hubo una pequeña segunda ola con seis estaciones más abiertas en dos días. A partir de ahí, las aperturas se volvieron esporádicas, con solo una estación añadida en varias fechas hasta 2024. Tambien pudimos ver que las estaciones "USPALLATA", "TERMAS DE RIO HONDO AERO", "MAQUINCHAO", "TINOGASTA", "BERNARDO DE IRIGOYEN AERO", tienen registros de un dia solo lo cual indicaria que estas estaciònes pudieron haber sido filtrada de manera incorrecta o no tienen suficientes datos

```{r}

#Segmentar por condiciones climaticas similares. 

# Filtrar y seleccionar las variables relevantes (temperatura, humedad, latitud, longitud)
df_clustering <- df %>%
  select(temperatura, humedad, latitud, longitud) %>%
  drop_na()  # Eliminar filas con NA

# Verificar que latitud y longitud son numéricas
df_clustering$latitud <- as.numeric(df_clustering$latitud)
df_clustering$longitud <- as.numeric(df_clustering$longitud)

# Normalización de los datos para evitar que latitud y longitud dominen el clustering
df_clustering_normalized <- df_clustering %>%
  mutate(across(c(temperatura, humedad), ~ (.-min(.)) / (max(.) - min(.))))

# Realizar el clustering usando K-means con 6 clusters (puedes ajustar el número)
set.seed(123)  # Para reproducibilidad
kmeans_result <- kmeans(df_clustering_normalized, centers = 5)

# Agregar los resultados del clustering al dataframe original
df$cluster <- as.factor(kmeans_result$cluster)

# Calcular las condiciones promedio por cluster (temperatura y humedad)
df_clustered_avg_location <- df %>%
  group_by(cluster) %>%
  summarise(
    latitud_promedio = mean(latitud, na.rm = TRUE),
    longitud_promedio = mean(longitud, na.rm = TRUE),
    temperatura_promedio = mean(temperatura, na.rm = TRUE),
    humedad_promedio = mean(humedad, na.rm = TRUE)
  )

# --- Opción 1: Visualizar los centros de los clusters en un mapa ---
fig <- plot_ly(data = df_clustered_avg_location, 
               type = 'scattermapbox',
               lat = ~latitud_promedio, 
               lon = ~longitud_promedio,
               mode = 'markers',
               marker = list(size = 15, opacity = 0.8),
               text = ~paste("Cluster:", cluster, 
                             "<br>Temp promedio:", round(temperatura_promedio, 1), "°C",
                             "<br>Humedad promedio:", round(humedad_promedio, 1), "%"),
               color = ~cluster,
               colors = "RdYlBu")

fig <- fig %>%
  layout(
    title = "Centros de Clusters Climáticos",
    mapbox = list(
      style = 'open-street-map',
      zoom = 4,
      center = list(lat = mean(df_clustered_avg_location$latitud_promedio, na.rm = TRUE),
                    lon = mean(df_clustered_avg_location$longitud_promedio, na.rm = TRUE))
    )
  )

fig

```

Luego de normalizar los datos y aplicar un algoritmo de clustering, identificamos varios grupos (clusters) de estaciones climáticas con características similares en diferentes regiones. El primer cluster corresponde al sur, donde la temperatura promedio es de 8.2°C y la humedad promedio es del 64%. Un segundo cluster abarca la Patagonia, con una temperatura promedio de 13.6°C y una humedad de 55.3%. Un tercer grupo corresponde a la región de Buenos Aires, con una temperatura promedio de 16.8°C y una humedad del 68.7%. El cuarto cluster se encuentra en Córdoba, donde la temperatura promedio es de 18.5°C y la humedad alcanza el 57.7%. Finalmente, un último cluster en Misiones presenta una temperatura promedio de 21°C y una humedad del 70.2%. Estos clusters nos han permitido segmentar las estaciones climáticas según sus características meteorológicas y su localización geográfica
